version: '3.5'

services:
  traefik:
    image: 'traefik:v2.0.0'
    container_name: 'traefik'
    networks:
      - backend
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https'

      - 'traefik.http.routers.api.entrypoints=web'
      - 'traefik.http.routers.api.rule=Host(`traefik.seniorproj.thinc.in.th`)'
      - 'traefik.http.routers.api.service=api@internal'
      # - 'traefik.http.routers.api.middlewares=traefik-auth'
      # - 'traefik.http.middlewares.api-auth.basicauth.users=user:$$apr1$$4NMNYRPk$$CtMpPrAFSp4obsq4Dcjtw1'
    command:
      # - '--log.level=DEBUG'
      # - '--api.insecure=true'
      - '--api=true'
      - '--providers.docker=true'
      - '--providers.docker.exposedbydefault=false'
      - '--entrypoints.web.address=:80'
      - '--entrypoints.websecure.address=:443'
      - '--certificatesresolvers.myhttpchallenge.acme.httpchallenge=true'
      - '--certificatesresolvers.myhttpchallenge.acme.httpchallenge.entrypoint=web'
      # - '--certificatesresolvers.myhttpchallenge.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory'
      - '--certificatesresolvers.myhttpchallenge.acme.email=ichannel.jakpat@gmail.com'
      - '--certificatesresolvers.myhttpchallenge.acme.storage=/letsencrypt/acme.json'
    ports:
      - '80:80'
      - '443:443'
      - '8080:8080'
    volumes:
      - './letsencrypt:/letsencrypt'
      - '/var/run/docker.sock:/var/run/docker.sock:ro'

  # whoami:
  #   image: 'containous/whoami'
  #   container_name: 'simple-service'
  #   labels:
  #     - 'traefik.enable=true'
  #     - 'traefik.http.routers.whoami_insecure.rule=host(`whoami.mydomain.com`)'
  #     - 'traefik.http.routers.whoami_insecure.entrypoints=web'
  #     - 'traefik.http.routers.whoami_insecure.middlewares=redirect-to-https@docker'
  #     - 'traefik.http.routers.whoami.rule=host(`whoami.mydomain.com`)'
  #     - 'traefik.http.routers.whoami.entrypoints=websecure'
  #     - 'traefik.http.routers.whoami.tls.certresolver=myhttpchallenge'

  db:
    volumes:
      - ./volumes/db:/data/db

  dashboard:
    image: senior-proj-dashboard
    container_name: senior-proj-dashboard-prod
    build: dashboard
    networks:
      - backend
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.dashboard.rule=Host(`seniorproj.thinc.in.th`)'
      - 'traefik.http.routers.dashboard.entrypoints=websecure'
      - 'traefik.http.routers.dashboard.tls.certresolver=myhttpchallenge'
      - 'traefik.http.services.dashboard.loadbalancer.server.port=80'

  backend:
    container_name: senior-proj-backend-prod
    build: nest
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.backend_insecure.rule=Host(`seniorproj.thinc.in.th`) && PathPrefix(`/iot`, `/api`)'
      - 'traefik.http.routers.backend_insecure.entrypoints=web'
      - 'traefik.http.routers.backend.rule=Host(`seniorproj.thinc.in.th`) && PathPrefix(`/iot`, `/api`)'
      - 'traefik.http.routers.backend.entrypoints=websecure'
      - 'traefik.http.routers.backend.tls.certresolver=myhttpchallenge'
      - 'traefik.http.services.backend.loadbalancer.server.port=3000'
    environment:
      NODE_ENV: production
    volumes:
      - ./nest/microgear:/app/microgear
